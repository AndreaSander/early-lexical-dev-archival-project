"0","`derivSimulCI` <- function(mod, n = 200, eps = 1e-7, newdata, term,"
"0","                           samples = 10000) {"
"0","    stopifnot(require(""MASS""))"
"0","    if(inherits(mod, ""gamm""))"
"0","        mod <- mod$gam"
"0","    m.terms <- attr(terms(mod), ""term.labels"")"
"0","    if(missing(newdata)) {"
"0","        newD <- sapply(model.frame(mod)[, m.terms, drop = FALSE],"
"0","                       function(x) seq(min(x), max(x) - (2*eps), length = n))"
"0","        names(newD) <- m.terms"
"0","    } else {"
"0","        newD <- newdata"
"0","    }"
"0","    newDF <- data.frame(newD) ## needs to be a data frame for predict"
"0","    X0 <- predict(mod, newDF, type = ""lpmatrix"")"
"0","    newDF <- newDF + eps"
"0","    X1 <- predict(mod, newDF, type = ""lpmatrix"")"
"0","    Xp <- (X1 - X0) / eps"
"0","    Xp.r <- NROW(Xp)"
"0","    Xp.c <- NCOL(Xp)"
"0","    ## dims of bs"
"0","    bs.dims <- sapply(mod$smooth, ""[["", ""bs.dim"") - 1"
"0","    ## number of smooth terms"
"0","    t.labs <- attr(mod$terms, ""term.labels"")"
"0","    ## match the term with the the terms in the model"
"0","    if(!missing(term)) {"
"0","        want <- grep(term, t.labs)"
"0","        if(!identical(length(want), length(term)))"
"0","            stop(""One or more 'term's not found in model!"")"
"0","        t.labs <- t.labs[want]"
"0","    }"
"0","    nt <- length(t.labs)"
"0","    ## list to hold the derivatives"
"0","    lD <- vector(mode = ""list"", length = nt)"
"0","    names(lD) <- t.labs"
"0","    ## sample draws from the posterior distribution of model coefficients"
"0","    Rbeta <- t(mvrnorm(n = samples, coef(mod), vcov(mod)))"
"0","    ## loop over the terms"
"0","    for(i in seq_len(nt)) {"
"0","        want <- grep(t.labs[i], colnames(X1))"
"0","        lD[[i]] <- list(deriv = Xp[, want] %*% coef(mod)[want],"
"0","                        simulations = Xp[, want] %*% Rbeta[want, ])"
"0","    }"
"0","    class(lD) <- ""derivSimulCI"""
"0","    lD$gamModel <- mod"
"0","    lD$eps <- eps"
"0","    lD$eval <- newD - eps"
"0","    lD ##return"
"0","}"
"0",""
"0","plot.derivSimulCI <- function(x, alpha = 0.05, polygon = TRUE,"
"0","                              sizer = FALSE, term,"
"0","                              eval = 0, lwd = 3,"
"0","                              col = ""lightgrey"", border = col,"
"0","                              ylab, xlab, main, ...) {"
"0","    l <- length(x) - 3"
"0","    ## get terms and check specified (if any) are in model"
"0","    term.labs <- names(x[seq_len(l)])"
"0","    if(missing(term)) {"
"0","        term <- term.labs"
"0","    } else {"
"0","        term <- term.labs[match(term, term.labs)]"
"0","    }"
"0","    if(any(miss <- is.na(term)))"
"0","        stop(paste(""'term'"", term[miss], ""not a valid model term.""))"
"0","    if(all(miss))"
"0","        stop(""All terms in 'term' not found in model."")"
"0","    l <- sum(!miss)"
"0","    nplt <- n2mfrow(l)"
"0","    if(missing(ylab))"
"0","        ylab <- expression(italic(hat(f)*""'""*(x)))"
"0","    if(missing(xlab)) {"
"0","        xlab <- attr(terms(x$gamModel), ""term.labels"")"
"0","        names(xlab) <- xlab"
"0","    }"
"0","    if (missing(main)) {"
"0","        main <- term"
"0","        names(main) <- term"
"0","    }"
"0","    ## compute confidence interval"
"0","    ciFUN <- function(x, alpha) {"
"0","        ahalf <- alpha / 2"
"0","        apply(x$simulations, 1, quantile, probs = c(ahalf, 1 - ahalf))"
"0","    }"
"0","    CI <- lapply(x[seq_len(l)], ciFUN, alpha = alpha)"
"0","    ## plots"
"0","    layout(matrix(seq_len(l), nrow = nplt[1], ncol = nplt[2]))"
"0","    on.exit(layout(1))"
"0","    for(i in term) {"
"0","        lwr <- CI[[i]][1,]"
"0","        upr <- CI[[i]][2,]"
"0","        ylim <- range(upr, lwr)"
"0","        plot(x$eval[,i], x[[i]]$deriv, type = ""n"","
"0","             ylim = ylim, ylab = ylab, xlab = xlab[i], main = main[i], ...)"
"0","        if(isTRUE(polygon)) {"
"0","            polygon(c(x$eval[,i], rev(x$eval[,i])),"
"0","                    c(upr, rev(lwr)), col = col, border = border)"
"0","        } else {"
"0","            lines(x$eval[,i], upr, lty = ""dashed"")"
"0","            lines(x$eval[,i], lwr, lty = ""dashed"")"
"0","        }"
"0","        abline(h = 0, ...)"
"0","        if(isTRUE(sizer)) {"
"0","            lines(x$eval[,i], x[[i]]$deriv, lwd = 1)"
"0","            S <- signifD(x[[i]]$deriv, x[[i]]$deriv, upr, lwr,"
"0","                         eval = eval)"
"0","            lines(x$eval[,i], S$incr, lwd = lwd, col = ""blue"")"
"0","            lines(x$eval[,i], S$decr, lwd = lwd, col = ""red"")"
"0","        } else {"
"0","            lines(x$eval[,i], x[[i]]$deriv, lwd = 2)"
"0","        }"
"0","    }"
"0","    invisible(x)"
"0","}"
"0",""
"0","signifD <- function(x, d, upper, lower, eval = 0) {"
"0","    miss <- upper > eval & lower < eval"
"0","    incr <- decr <- x"
"0","    want <- d > eval"
"0","    incr[!want | miss] <- NA"
"0","    want <- d < eval"
"0","    decr[!want | miss] <- NA"
"0","    list(incr = incr, decr = decr)"
"0","}"
